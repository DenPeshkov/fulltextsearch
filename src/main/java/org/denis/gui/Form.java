package org.denis.gui;

import com.alee.laf.WebLookAndFeel;
import com.bulenkov.darcula.DarculaLaf;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import mdlaf.MaterialLookAndFeel;
import org.denis.files.SearchFiles;

import javax.swing.*;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.plaf.metal.MetalLookAndFeel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.nio.file.Paths;

public class Form extends JFrame {

	private JPanel mPanel;
	private JButton directory;
	private JTextField pathText;
	private JTextField textToSearch;
	private JTree tree;
	private JTextField extension;
	private JButton search;
	private JFileChooser fileChooser = new JFileChooser();

	public Form() throws ClassNotFoundException, UnsupportedLookAndFeelException, InstantiationException, IllegalAccessException {
		$$$setupUI$$$();
		setContentPane(mPanel);
		setVisible(true);

		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		this.pack();
		//this.setLocationByPlatform(true);
		this.setMinimumSize(this.getSize());
		this.setVisible(true);
		this.pack();

		mPanel.setMinimumSize(this.getSize());

		extension.setText(".log");
		mPanel.setMinimumSize(new Dimension(1000, 1000));

		pathText.setText("Search ...");

		((DefaultTreeModel) tree.getModel()).setRoot(null);
		tree.setRootVisible(false);

		directory.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				fileChooser.setDialogTitle("Choose directory");
				fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
				int result = fileChooser.showOpenDialog(Form.this);
				if (result == JFileChooser.APPROVE_OPTION)
					pathText.setText(fileChooser.getSelectedFile().toString());
			}
		});

		search.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				drawTree();
			}
		});
	}

	private void drawTree() {
		SearchFiles searchFiles = new SearchFiles();
		FilesToTree filesToTree = new FilesToTree(tree, mPanel);
		searchFiles.registerObserver(filesToTree);
		if (!pathText.getText().isEmpty()) {
			new SwingWorker<Void, Void>() {

				@Override
				protected Void doInBackground() throws Exception {
					searchFiles.traverseTree(Paths.get(pathText.getText()), extension.getText().isEmpty() ? "*" : extension.getText(), textToSearch.getText());
					return null;
				}

				@Override
				protected void done() {
					super.done();
				}
			}.execute();
		}
	}

	public static void main(String[] args) {
		//edt
		SwingUtilities.invokeLater(() -> {
			try {
				//WebLookAndFeel.install();
				UIManager.getFont("Label.font");
				UIManager.setLookAndFeel("com.bulenkov.darcula.DarculaLaf");

				Form form = new Form();
			} catch (ClassNotFoundException | UnsupportedLookAndFeelException | InstantiationException | IllegalAccessException e) {
				e.printStackTrace();
			}
		});
	}

	private void createUIComponents() {
		// TODO: place custom component creation code here
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		mPanel = new JPanel();
		mPanel.setLayout(new GridLayoutManager(3, 5, new Insets(0, 0, 0, 0), -1, -1));
		mPanel.putClientProperty("html.disable", Boolean.TRUE);
		final JScrollPane scrollPane1 = new JScrollPane();
		mPanel.add(scrollPane1, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(200, 200), new Dimension(200, 600), null, 0, false));
		tree = new JTree();
		scrollPane1.setViewportView(tree);
		search = new JButton();
		search.setText("Search");
		mPanel.add(search, new GridConstraints(1, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		directory = new JButton();
		directory.setHorizontalTextPosition(0);
		directory.setLabel("...");
		directory.setOpaque(false);
		directory.setText("...");
		mPanel.add(directory, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		pathText = new JTextField();
		mPanel.add(pathText, new GridConstraints(0, 0, 1, 5, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		extension = new JTextField();
		mPanel.add(extension, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		textToSearch = new JTextField();
		mPanel.add(textToSearch, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return mPanel;
	}

}
